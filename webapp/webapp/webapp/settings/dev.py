"""
Django settings for webapp project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import os
import environ

# Initialise environment variables
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

ALLOWED_HOSTS = ["*"]


# Application definition

PREREQ_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "bootstrap4",
    "bootstrap_datepicker_plus",
    # 'crispy_forms',
    "mathfilters",
    "channels",
    "corsheaders",
]

PROJECT_APPS = [
    "scada.apps.ScadaConfig",
    "bio.apps.BioConfig",
]

INSTALLED_APPS = PREREQ_APPS + PROJECT_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "scada.middleware.SessionTimeoutMiddleware",
    "scada.middleware.NoCacheMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

ROOT_URLCONF = "webapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "webapp.wsgi.application"

ASGI_APPLICATION = "webapp.asgi.application"

# Channel layers configuration (for WebSocket communication)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                {
                    "address": f"redis://{env('REDIS_CHANNELS_HOST')}:{env('REDIS_CHANNELS_PORT')}",
                    "password": env("REDIS_PASS"),
                }
            ],
        },
    },
}

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer",  # For development, use Redis in production
#     },
# }

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD": env("DATABASE_PASS"),
        "HOST": env("DATABASE_HOST"),  # Or an IP Address that your DB is hosted on
        "PORT": env("DATABASE_PORT"),
    },
    "oracle": {
        "ENGINE": "django.db.backends.oracle",
        "NAME": env("ORACLE_DATABASE_NAME"),
        "USER": env("ORACLE_DATABASE_USER"),
        "PASSWORD": env("ORACLE_DATABASE_PASS"),
        "HOST": env("ORACLE_DATABASE_HOST"),
        "PORT": env("ORACLE_DATABASE_PORT"),
    },
}

DATABASE_URL_LOCAL = (
    env("DBMS")
    + "://"
    + env("DATABASE_USER_LOCAL")
    + ":"
    + env("DATABASE_PASS_LOCAL")
    + "@"
    + env("DATABASE_HOST_LOCAL")
    + "/"
    + env("DATABASE_NAME")
    + "?charset=utf8mb4"
)
DATABASE_URL = (
    env("DBMS")
    + "://"
    + env("DATABASE_USER")
    + ":"
    + env("DATABASE_PASS")
    + "@"
    + env("DATABASE_HOST")
    + "/"
    + env("DATABASE_NAME")
    + "?charset=utf8mb4"
)

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Edmonton"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# By default, it tries to find the requested static file in folders listed in the STATICFILES_DIRS. In case of failure, Django tries to find the file using django.contrib.staticfiles.finders.AppDirectoriesFinder, which looks in the static folder of every installed application in the project.
STATIC_URL = "static/"
# STATIC_ROOT is where all static files are deployed when run collectstatic, in this case: business_platform/webapp/webapp/webapp/static
# if any static file change in an app, need to run "python manage.py collectstatic --noinput" on local to update the change in STATIC_ROOT. It automatically updates in container.
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "/scada/home/"  # This is the default URL Django will redirect to
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "debug.log"),
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console", "file"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}

# only use the following when using HTTPS. If using HTTP, please comment them out.
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True

# by default None
CSRF_COOKIE_DOMAIN = None
CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "https://localhost",
    "http://127.0.0.1",
    "https://127.0.0.1",
    "http://18.144.65.184",
    "https://18.144.65.184",
]

# Set session to expire after 5 minutes (300 seconds)
SESSION_COOKIE_AGE = 300
# Expire session on browser close
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# Ensure session data is cleared after expiration
SESSION_SAVE_EVERY_REQUEST = False
# Configure session engine to use Redis
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
# Configure Redis as cache backend
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{env('REDIS_CHANNELS_HOST')}:{env('REDIS_CHANNELS_PORT')}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Set Hugging Face cache directory to /tmp/.cache/huggingface
os.environ["HF_HOME"] = "/tmp/.cache/huggingface"

# Allow all origins (not recommended for production)
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     "https://example.com",
#     "https://sub.example.com",
# ]

# If you need to allow CORS for specific methods
CORS_ALLOWED_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
    "HEAD",
]

# If you need to allow specific headers
CORS_ALLOWED_HEADERS = [
    "content-type",
    "authorization",
    "x-csrftoken",
]

# Allow credentials (if your frontend needs to send cookies or authentication headers)
CORS_ALLOW_CREDENTIALS = True

# Add custom CORS headers (optional)
CORS_EXPOSE_HEADERS = [
    "content-type",
    "x-custom-header",
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
